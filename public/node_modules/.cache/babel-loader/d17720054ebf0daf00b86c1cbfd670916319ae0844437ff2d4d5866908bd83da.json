{"ast":null,"code":"// import React, { createContext, useReducer, useEffect } from \"react\";\n// import AppReducer from \"./AppReducer\";\n// // initial  state\n// const initialState = {\n//   watchlist: localStorage.getItem(\"watchlist\")\n//     ? JSON.parse(localStorage.getItem(\"watchlist\"))\n//     : [],\n//     watched: localStorage.getItem(\"watched\")\n//     ? JSON.parse(localStorage.getItem(\"watched\"))\n//     : [],\n// };\n\n// // create context\n\n// export const GlobalContext = createContext(initialState);\n\n// // provider components\n// export const GlobalProvider = (props) => {\n//   const [state, dispatch] = useReducer(AppReducer, initialState);\n//   // localstorage\n//   useEffect(() => {\n//     localStorage.setItem(\"watchlist\", JSON.stringify(state.watchlist));\n//     localStorage.setItem(\"watched\", JSON.stringify(state.watched));\n//   }, [state]);\n\n//   // action\n//   const addMovieToWatchlist = (movie) => {\n//     dispatch({ type: \"ADD_MOVIE_TO_WATCHLIST\", payload: movie });\n//   };\n\n//   return (\n//     <GlobalContext.Provider\n//       value={{\n//         watchlist: state.watchlist,\n//         watched: state.watched,\n//         addMovieToWatchlist,\n\n//       }}\n//     >\n//       {props.children}\n//     </GlobalContext.Provider>\n//   );\n// };\n\n// import React, { createContext, useReducer, useEffect } from \"react\";\n// import AppReducer from \"./AppReducer\"; // Ensure this is the correct path\n\n// // Initial state\n// const initialState = {\n//   watchlist: JSON.parse(localStorage.getItem(\"watchlist\")) || [],\n//   watched: JSON.parse(localStorage.getItem(\"watched\")) || [],\n// };\n\n// // Create context\n// export const GlobalContext = createContext(initialState);\n\n// // Provider component\n// export const GlobalProvider = (props) => {\n//   const [state, dispatch] = useReducer(AppReducer, initialState); // Ensure AppReducer is valid here\n\n//   useEffect(() => {\n//     localStorage.setItem(\"watchlist\", JSON.stringify(state.watchlist));\n//     localStorage.setItem(\"watched\", JSON.stringify(state.watched));\n//   }, [state]);\n\n//   // Actions\n//   const addMovieToWatchlist = (movie) => {\n//     dispatch({ type: \"ADD_MOVIE_TO_WATCHLIST\", payload: movie });\n//   };\n\n//   const removeMoviefromWatchlist = (id) => {\n//     dispatch({ type: \"REMOVE_MOVIE_FROM_WATCHLIST\", payload: id });\n//   };\n\n//   const addMovieToWatched = movie => {\n//     dispatch({type: \"ADD_MOVIE_TO_WATCHED\", payload: movie});\n//   };\n\n//   // move  to watch list\n//   const moveToWatchlist = movie => {\n//     dispatch({type: 'MOVE_TO_WATCHLIST', payload: movie})\n//   } \n\n// // remove from watched\n\n// const removeFromWatched = (id) =>{\n//          dispatch({type: \"REMOVE_FROM_WATCHED\", payload:id});\n// }\n\n//   return (\n//     <GlobalContext.Provider\n//       value={{\n//         watchlist: state.watchlist,\n//         watched: state.watched,\n//         addMovieToWatchlist,\n//         removeMoviefromWatchlist,\n//         addMovieToWatched,\n//         moveToWatchlist,\n//         removeFromWatched\n//       }}\n//     >\n//       {props.children}\n//     </GlobalContext.Provider>\n//   );\n// };","map":{"version":3,"names":[],"sources":["C:/Users/Dell/OneDrive/Desktop/watchListApp/watchlist/src/context/GlobalState.js"],"sourcesContent":["// import React, { createContext, useReducer, useEffect } from \"react\";\r\n// import AppReducer from \"./AppReducer\";\r\n// // initial  state\r\n// const initialState = {\r\n//   watchlist: localStorage.getItem(\"watchlist\")\r\n//     ? JSON.parse(localStorage.getItem(\"watchlist\"))\r\n//     : [],\r\n//     watched: localStorage.getItem(\"watched\")\r\n//     ? JSON.parse(localStorage.getItem(\"watched\"))\r\n//     : [],\r\n// };\r\n\r\n// // create context\r\n\r\n// export const GlobalContext = createContext(initialState);\r\n\r\n// // provider components\r\n// export const GlobalProvider = (props) => {\r\n//   const [state, dispatch] = useReducer(AppReducer, initialState);\r\n//   // localstorage\r\n//   useEffect(() => {\r\n//     localStorage.setItem(\"watchlist\", JSON.stringify(state.watchlist));\r\n//     localStorage.setItem(\"watched\", JSON.stringify(state.watched));\r\n//   }, [state]);\r\n\r\n//   // action\r\n//   const addMovieToWatchlist = (movie) => {\r\n//     dispatch({ type: \"ADD_MOVIE_TO_WATCHLIST\", payload: movie });\r\n//   };\r\n\r\n//   return (\r\n//     <GlobalContext.Provider\r\n//       value={{\r\n//         watchlist: state.watchlist,\r\n//         watched: state.watched,\r\n//         addMovieToWatchlist,\r\n\r\n//       }}\r\n//     >\r\n//       {props.children}\r\n//     </GlobalContext.Provider>\r\n//   );\r\n// };\r\n\r\n\r\n// import React, { createContext, useReducer, useEffect } from \"react\";\r\n// import AppReducer from \"./AppReducer\"; // Ensure this is the correct path\r\n\r\n// // Initial state\r\n// const initialState = {\r\n//   watchlist: JSON.parse(localStorage.getItem(\"watchlist\")) || [],\r\n//   watched: JSON.parse(localStorage.getItem(\"watched\")) || [],\r\n// };\r\n\r\n// // Create context\r\n// export const GlobalContext = createContext(initialState);\r\n\r\n// // Provider component\r\n// export const GlobalProvider = (props) => {\r\n//   const [state, dispatch] = useReducer(AppReducer, initialState); // Ensure AppReducer is valid here\r\n\r\n//   useEffect(() => {\r\n//     localStorage.setItem(\"watchlist\", JSON.stringify(state.watchlist));\r\n//     localStorage.setItem(\"watched\", JSON.stringify(state.watched));\r\n//   }, [state]);\r\n\r\n//   // Actions\r\n//   const addMovieToWatchlist = (movie) => {\r\n//     dispatch({ type: \"ADD_MOVIE_TO_WATCHLIST\", payload: movie });\r\n//   };\r\n\r\n//   const removeMoviefromWatchlist = (id) => {\r\n//     dispatch({ type: \"REMOVE_MOVIE_FROM_WATCHLIST\", payload: id });\r\n//   };\r\n\r\n//   const addMovieToWatched = movie => {\r\n//     dispatch({type: \"ADD_MOVIE_TO_WATCHED\", payload: movie});\r\n//   };\r\n\r\n//   // move  to watch list\r\n//   const moveToWatchlist = movie => {\r\n//     dispatch({type: 'MOVE_TO_WATCHLIST', payload: movie})\r\n//   } \r\n\r\n// // remove from watched\r\n\r\n// const removeFromWatched = (id) =>{\r\n//          dispatch({type: \"REMOVE_FROM_WATCHED\", payload:id});\r\n// }\r\n\r\n//   return (\r\n//     <GlobalContext.Provider\r\n//       value={{\r\n//         watchlist: state.watchlist,\r\n//         watched: state.watched,\r\n//         addMovieToWatchlist,\r\n//         removeMoviefromWatchlist,\r\n//         addMovieToWatched,\r\n//         moveToWatchlist,\r\n//         removeFromWatched\r\n//       }}\r\n//     >\r\n//       {props.children}\r\n//     </GlobalContext.Provider>\r\n//   );\r\n// };\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}