{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Desktop\\\\watchListApp\\\\watchlist\\\\src\\\\components\\\\Add.js\",\n  _s = $RefreshSig$();\n// import React, {useState} from 'react'\n\n// export const Add = () => {\n//   const [query, setQuery] = useState(\"\");\n//   const [results, setResults] = useState([]);\n\n//   const onChange = (e) => {\n//     e.preventDefault();\n\n//     setQuery(e.target.value);\n\n//     fetch(\n//     //  `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=1&include_adult=false&query=${e.target.value}`\n//        'http://www.omdbapi.com/?apikey=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=1&include_adult=false&query=${e.target.value}'\n//   )\n//       .then((res) => res.json())\n//       .then((data) => {\n//         if (!data.errors) {\n//           setResults(data.results);\n//         } else {\n//           setResults([]);\n//         }\n//       });\n//   };\n\n//   return (\n//     <div className='add-page'>\n//       <div className='container'>\n//         <div className='add-content'>\n//           <div className='input-wrapper'>\n//             <input type='text' placeholder='Search for a movie... '\n//             value={query}\n//             onChange={onChange}/>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Add = () => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const onChange = e => {\n    e.preventDefault();\n\n    // Update the query state with the input value\n    setQuery(e.target.value);\n\n    // Check if the query is not empty to avoid unnecessary requests\n    if (e.target.value.trim()) {\n      // Make a fetch request to OMDB API\n      fetch(`http://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_KEY}&s=${e.target.value}`).then(res => res.json()).then(data => {\n        // Check if the API response contains search results\n        if (data.Response === \"True\") {\n          setResults(data.Search); // Set results with the search data\n        } else {\n          setResults([]); // If no results, clear the results array\n        }\n      }).catch(error => {\n        console.error(\"Error fetching data from OMDB API:\", error);\n        setResults([]); // Clear results in case of an error\n      });\n    } else {\n      setResults([]); // Clear results if query is empty\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Search for a movie\",\n      value: query,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: results.length > 0 && results.map(movie => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [movie.Title, \" (\", movie.Year, \")\"]\n      }, movie.imdbID, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(Add, \"Grp0ouI1isRc8g0LMx1FfgxNSWM=\");\n_c = Add;\nvar _c;\n$RefreshReg$(_c, \"Add\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Add","_s","query","setQuery","results","setResults","onChange","e","preventDefault","target","value","trim","fetch","process","env","REACT_APP_OMDB_KEY","then","res","json","data","Response","Search","catch","error","console","children","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","length","map","movie","Title","Year","imdbID","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Desktop/watchListApp/watchlist/src/components/Add.js"],"sourcesContent":["// import React, {useState} from 'react'\r\n\r\n// export const Add = () => {\r\n//   const [query, setQuery] = useState(\"\");\r\n//   const [results, setResults] = useState([]);\r\n\r\n\r\n//   const onChange = (e) => {\r\n//     e.preventDefault();\r\n\r\n//     setQuery(e.target.value);\r\n\r\n//     fetch(\r\n//     //  `https://api.themoviedb.org/3/search/movie?api_key=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=1&include_adult=false&query=${e.target.value}`\r\n//        'http://www.omdbapi.com/?apikey=${process.env.REACT_APP_TMDB_KEY}&language=en-US&page=1&include_adult=false&query=${e.target.value}'\r\n//   )\r\n//       .then((res) => res.json())\r\n//       .then((data) => {\r\n//         if (!data.errors) {\r\n//           setResults(data.results);\r\n//         } else {\r\n//           setResults([]);\r\n//         }\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <div className='add-page'>\r\n//       <div className='container'>\r\n//         <div className='add-content'>\r\n//           <div className='input-wrapper'>\r\n//             <input type='text' placeholder='Search for a movie... '\r\n//             value={query}\r\n//             onChange={onChange}/>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nexport const Add = () => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n\r\n  const onChange = (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Update the query state with the input value\r\n    setQuery(e.target.value);\r\n\r\n    // Check if the query is not empty to avoid unnecessary requests\r\n    if (e.target.value.trim()) {\r\n      // Make a fetch request to OMDB API\r\n      fetch(\r\n        `http://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_KEY}&s=${e.target.value}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          // Check if the API response contains search results\r\n          if (data.Response === \"True\") {\r\n            setResults(data.Search); // Set results with the search data\r\n          } else {\r\n            setResults([]); // If no results, clear the results array\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching data from OMDB API:\", error);\r\n          setResults([]); // Clear results in case of an error\r\n        });\r\n    } else {\r\n      setResults([]); // Clear results if query is empty\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Search for a movie\"\r\n        value={query}\r\n        onChange={onChange}\r\n      />\r\n      <ul>\r\n        {results.length > 0 &&\r\n          results.map((movie) => (\r\n            <li key={movie.imdbID}>\r\n              {movie.Title} ({movie.Year})\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,OAAO,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMS,QAAQ,GAAIC,CAAC,IAAK;IACtBA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACAL,QAAQ,CAACI,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;;IAExB;IACA,IAAIH,CAAC,CAACE,MAAM,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE;MACzB;MACAC,KAAK,CACH,kCAAkCC,OAAO,CAACC,GAAG,CAACC,kBAAkB,MAAMR,CAAC,CAACE,MAAM,CAACC,KAAK,EACtF,CAAC,CACEM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEG,IAAI,IAAK;QACd;QACA,IAAIA,IAAI,CAACC,QAAQ,KAAK,MAAM,EAAE;UAC5Bf,UAAU,CAACc,IAAI,CAACE,MAAM,CAAC,CAAC,CAAC;QAC3B,CAAC,MAAM;UACLhB,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;QAClB;MACF,CAAC,CAAC,CACDiB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;QAC1DlB,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC;IACN,CAAC,MAAM;MACLA,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;IAClB;EACF,CAAC;EAED,oBACEN,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MACE2B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,oBAAoB;MAChCjB,KAAK,EAAER,KAAM;MACbI,QAAQ,EAAEA;IAAS;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACFhC,OAAA;MAAA0B,QAAA,EACGrB,OAAO,CAAC4B,MAAM,GAAG,CAAC,IACjB5B,OAAO,CAAC6B,GAAG,CAAEC,KAAK,iBAChBnC,OAAA;QAAA0B,QAAA,GACGS,KAAK,CAACC,KAAK,EAAC,IAAE,EAACD,KAAK,CAACE,IAAI,EAAC,GAC7B;MAAA,GAFSF,KAAK,CAACG,MAAM;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEjB,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAC9B,EAAA,CApDWD,GAAG;AAAAsC,EAAA,GAAHtC,GAAG;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}